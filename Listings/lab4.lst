


ARM Macro Assembler    Page 1 


    1 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
    2 00000000         ;;; Project: Lab 4 - Sorting arrays of characters in asc
                       ending 
    3 00000000         ;;;          order using Merge sort algorithm
    4 00000000         ;;; File: 
    5 00000000         ;;; Class: lab4_sort.s
    6 00000000         ;;; Date: 
    7 00000000         ;;; Programmer: 
    8 00000000         ;;; Description:
    9 00000000         
   10 00000000         
   11 00000000         ; Directives
   12 00000000                 PRESERVE8
   13 00000000                 THUMB
   14 00000000         
   15 00000000         ;;; Equates
   16 00000000 20001000 
                       end_of_stack
                               equ              0x20001000  ;Allocating 4kB of 
                                                            memory for the stac
                                                            k
   17 00000000 20000000 
                       RAM_START
                               equ              0x20000000
   18 00000000         
   19 00000000         ; Vector Table Mapped to Address 0 at Reset, Linker requ
                       ires __Vectors to be exported
   20 00000000         
   21 00000000                 AREA             RESET, DATA, READONLY
   22 00000000                 EXPORT           __Vectors
   23 00000000         ;The DCD directive allocates one or more words of memory
                       , aligned on four-byte boundaries, 
   24 00000000         ;and defines the initial runtime contents of the memory.
                       
   25 00000000         
   26 00000000         
   27 00000000         __Vectors
   28 00000000 20002000        DCD              0x20002000  ; stack pointer val
                                                            ue when stack is em
                                                            pty
   29 00000004 00000000        DCD              Reset_Handler ; reset vector
   30 00000008         
   31 00000008                 ALIGN
   32 00000008         
   33 00000008         ;My  program,  Linker requires Reset_Handler and it must
                        be exported
   34 00000008         
   35 00000008                 AREA             MYCODE, CODE, READONLY
   36 00000000                 ENTRY
   37 00000000                 EXPORT           Reset_Handler
   38 00000000         
   39 00000000         
   40 00000000         
   41 00000000         
   42 00000000         Reset_Handler
                               PROC
   43 00000000         ;; Copy the string of characters from flash to RAM buffe
                       r so it 



ARM Macro Assembler    Page 2 


   44 00000000         ;; can be sorted  - Student to do  
   45 00000000         
   46 00000000 4949            LDR              R1, =string1 ;load the source s
                                                            tring into R1
   47 00000002 4A4A            LDR              R2, =0x20000100 ;load start of 
                                                            destination address
                                                             into R2
   48 00000004 4B4A            LDR              R3, =string1size ;putting size 
                                                            (in bytes) of strin
                                                            g1 into R3
   49 00000006 F7FF FFFE       bl               byte_copy
   50 0000000A         
   51 0000000A 494A            LDR              R1, = 0x20000400
   52 0000000C F7FF FFFE       bl               sort
   53 00000010         
   54 00000010         
   55 00000010         
   56 00000010         ;; we are finished
   57 00000010 E7FE    done    b                done        ; finished mainline
                                                             code.
   58 00000012                 ENDP
   59 00000012         
   60 00000012         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
   61 00000012         string1
   62 00000012 41 42 45 
              46 5A 41 
              43 44 47 
              4C               dcb              "ABEFZACDGL"
   63 0000001C 0000000A 
                       string1size
                               equ              . - string1
   64 0000001C         
   65 0000001C                 align
   66 0000001C         size1
   67 0000001C 0000000A        dcd              string1size
   68 00000020         
   69 00000020         
   70 00000020         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
   71 00000020         ;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;
   72 00000020         ;;; Author:
   73 00000020         ;;; Sort an array of characters in ascending order using
                        the 
   74 00000020         ;;; algorithm described in the lab handout
   75 00000020         ;;; 
   76 00000020         ;;; Require:
   77 00000020         ;;; R1: ptr to buffer in RAM containing the input string
                        (string_buffer)
   78 00000020         ;;; R2: ptr to auxiliary buffer in RAM used by subroutin
                       e "merge" (aux_buffer)
   79 00000020         ;;; R3: size of the string (contained in [size1] )
   80 00000020         ;;; 
   81 00000020         ;;; Promise: Returns 1 in error register R10 if there wa
                       s an error, else 
   82 00000020         ;;; R10 is 0 and the buffer in RAM contains the sorted s
                       tring of characters
   83 00000020         ;;; Subroutine must not modify any other register.



ARM Macro Assembler    Page 3 


   84 00000020         ;;; 
   85 00000020                 ALIGN
   86 00000020         sort    PROC
   87 00000020         ;; include here the body of your routine
   88 00000020 E92D 43FE       PUSH             {LR,R1,R2,R3,R4,R5,R6,R7,R8,R9}
   89 00000024         
   90 00000024 F04F 0802       MOV              R8, #2
   91 00000028 2B01            CMP              R3, #1
   92 0000002A D105            BNE              part2
   93 0000002C 7808            LDRB             R0, [R1]
   94 0000002E F889 0000       STRB             R0, [R9]
   95 00000032 E8BD 43FE       POP              {LR,R1,R2,R3,R4,R5,R6,R7,R8,R9}
   96 00000036 4770            BX               LR
   97 00000038         
   98 00000038         part2
   99 00000038         ;R1 is the location of the start of the string we copied
                        from byte copy
  100 00000038         ;R2 is a new location under R1 0x20000400
  101 00000038         ;R3 is the size in bytes of the string
  102 00000038 2B02            CMP              R3, #2
  103 0000003A D10A            BNE              part3
  104 0000003C F102 0401       ADD              R4, R2, #1  ; R4 (sublist2)
  105 00000040 F04F 0501       MOV              R5, #1      ;Size of sublist2
  106 00000044 F04F 0601       MOV              R6, #1      ;Size of sublist1
  107 00000048 F7FF FFFE       BL               merge
  108 0000004C         
  109 0000004C E8BD 43FE       POP              {LR,R1,R2,R3,R4,R5,R6,R7,R8,R9}
  110 00000050 4770            BX               LR
  111 00000052         part3
  112 00000052 FB93 F3F8       SDIV             R3, R3, R8
  113 00000056 461E            MOV              R6, R3      ; Size of sublist1
  114 00000058 F7FF FFFE       BL               sort
  115 0000005C         
  116 0000005C EB06 0402       ADD              R4, R6, R2
  117 00000060 461D            MOV              R5, R3      ; Size of sublist2
  118 00000062 F7FF FFFE       BL               sort
  119 00000066         
  120 00000066 F7FF FFFE       BL               merge
  121 0000006A E8BD 43FE       POP              {LR,R1,R2,R3,R4,R5,R6,R7,R8,R9}
  122 0000006E 4770            bx               lr
  123 00000070         
  124 00000070                 ENDP
  125 00000070         
  126 00000070         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
  127 00000070         ;;; copy an array of bytes from source ptr R1 to dest pt
                       r R2.  R3
  128 00000070         ;;; contains the number of bytes to copy.
  129 00000070         ;;; Require:
  130 00000070         ;;; The destination had better be somewhere in RAM, but 
                       that's the
  131 00000070         ;;; caller's responsibility.  As is the job to ensure th
                       e source and 
  132 00000070         ;;; dest arrays don't overlap.
  133 00000070         ;;;
  134 00000070         ;;; Promise: No registers are modified.  The destination
                        buffer is
  135 00000070         ;;;          modified.
  136 00000070         ;;; Author: Prof. Karim Naqvi (Oct 2013)



ARM Macro Assembler    Page 4 


  137 00000070                 ALIGN
  138 00000070         byte_copy
                               PROC
  139 00000070 B41E            push             {r1,r2,r3,r4}
  140 00000072 F04F 0400       LDR              R4, =0x00000000
  141 00000076         
  142 00000076         copyLoop
  143 00000076 7808            LDRB             R0, [R1]    ;Load the address i
                                                            n memory into R0
  144 00000078 7010            STRB             R0, [R2]    ;Store one byte fro
                                                            m string1 into the 
                                                            memory address loca
                                                            tion
  145 0000007A F104 0401       ADD              R4, R4, #0x00000001 ;Increment 
                                                            the counter
  146 0000007E F101 0101       ADD              R1, R1, #0x00000001 ;
  147 00000082 F102 0201       ADD              R2, R2, #0x00000001 ;Increment 
                                                            the memory location
                                                            Increment to the ne
                                                            xt byte in the stri
                                                            ng
  148 00000086         
  149 00000086 429C            CMP              R4, R3      ;Compare the counte
                                                            r with string size
  150 00000088 D1F5            BNE              copyLoop    ;Branch if they do 
                                                            not equal back to t
                                                            he loop
  151 0000008A                 ENDP
  152 0000008A         
  153 0000008A BC1E            pop              {r1,r2,r3,r4}
  154 0000008C 4770            bx               lr
  155 0000008E         
  156 0000008E         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
  157 0000008E         ;;; Author: Diego Castro (Nov 2013)
  158 0000008E         ;;; Merges two sorted sublists (sublist1 and sublist2) t
                       hat 
  159 0000008E         ;;; contains the ASCII code of characters. Resulting arr
                       ay 
  160 0000008E         ;;; combines the characters of both sublists and it is s
                       orted in ascending order
  161 0000008E         ;;; The subroutine will overwrite the original contents 
                       of both sublists
  162 0000008E         ;;;
  163 0000008E         ;;; Require: 
  164 0000008E         ;;;  R1: pointer to an auxiliary buffer
  165 0000008E         ;;;  R2: pointer to sublist1
  166 0000008E         ;;;  R4: pointer to sublist2
  167 0000008E         ;;;     R5: size of sublist2
  168 0000008E         ;;;  R6: size of sublist1
  169 0000008E         ;;; Promise: Sublist1 and sublist2 are adjacent buffers 
                       in memory 
  170 0000008E         ;;; (i.e. first memory address of sublist2 is located 
  171 0000008E         ;;; right after last memory address of sublist1). Both s
                       ublists will be overwritten  
  172 0000008E         ;;; with the sorted array after merging. 
  173 0000008E         ;;; If stack overflow occurs, it returns 1 in error regi
                       ster R10 else r10 is zero. 
  174 0000008E         ;;; Subroutine does not modify any other register.



ARM Macro Assembler    Page 5 


  175 0000008E         ;;; Example: 
  176 0000008E         ;;;            sublist1  |  Sublist2
  177 0000008E         ;;;                  degz|fht
  178 0000008E         ;;;
  179 0000008E         ;;;            sorted array
  180 0000008E         ;;;                  defghtz
  181 0000008E         ;;; Note: this function needs at least 9 words of free s
                       pace in the stack
  182 0000008E 00 00           ALIGN
  183 00000090         merge   PROC
  184 00000090         
  185 00000090         ;;;checking if there is enough space in stack
  186 00000090 F8DF A0A4       ldr              r10,=end_of_stack
  187 00000094 EBBD 0A0A       subs             r10,sp,r10  ;R10 contains numbe
                                                            r of bytes availabl
                                                            e in stack   
  188 00000098 F1BA 0F24       cmp              r10,#36     ;this subroutine re
                                                            quires at least 9 w
                                                            ords (36 bytes) of 
                                                            free space in the s
                                                            tack 
  189 0000009C DC02            bgt              no_stack_overflow
  190 0000009E F04F 0A01       mov              r10,#1      ;not enough space i
                                                            n stack for this pr
                                                            ocedure
  191 000000A2 4770            bx               lr
  192 000000A4         
  193 000000A4         
  194 000000A4         no_stack_overflow
  195 000000A4 F04F 0A00       mov              r10,#0
  196 000000A8 B508            push             {r3,lr}
  197 000000AA E92D 01F6       push             {r1,r2,r4,r5,r6,r7,r8}
  198 000000AE         
  199 000000AE         
  200 000000AE B915    check   cbnz             r5,load_sub1 ;when r5 is 0, we 
                                                            are done checking s
                                                            ublist 1
  201 000000B0 F04F 078F       mov              r7,#0x8F    ;done with sublist 
                                                            1, loading high val
                                                            ue in R7
  202 000000B4 E004            b                load_sub2
  203 000000B6         load_sub1
  204 000000B6 7817            ldrb             r7,[r2]     ;R7 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist1
  205 000000B8 B916            cbnz             r6,load_sub2
  206 000000BA F04F 088F       mov              r8,#0x8F    ;done with sublist 
                                                            2, loading high val
                                                            ue in R8
  207 000000BE E001            b                compare
  208 000000C0         load_sub2
  209 000000C0 F894 8000       ldrb             r8,[r4]     ;R8 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist2
  210 000000C4         
  211 000000C4 4547    compare cmp              r7,r8
  212 000000C6 D113            bne              charac_diff
  213 000000C8 700F            strb             r7,[r1]     ;both characters ar
                                                            e equal, we copy bo



ARM Macro Assembler    Page 6 


                                                            th to the aux buffe
                                                            r;
  214 000000CA F101 0101       add              r1,#1
  215 000000CE F881 8000       strb             r8,[r1]
  216 000000D2 F101 0101       add              r1,#1
  217 000000D6         ;;;Updating indexes
  218 000000D6 B115            cbz              r5,cont_sub2 ;index for sublist
                                                             1 will be zero whe
                                                            n we are done inspe
                                                            cting that sublist
  219 000000D8 3D01            subs             r5,#1
  220 000000DA F102 0201       add              r2,#1
  221 000000DE B116    cont_sub2
                               cbz              r6,check_if_done ;index for sub
                                                            list 2 will be zero
                                                             when we are done i
                                                            nspecting that subl
                                                            ist
  222 000000E0 3E01            subs             r6,#1
  223 000000E2 F104 0401       add              r4,#1
  224 000000E6         check_if_done
  225 000000E6 42B5            cmp              r5,r6
  226 000000E8 D1E1            bne              check
  227 000000EA 2D00            cmp              r5,#0       ;both indexes are z
                                                            ero, then we are do
                                                            ne
  228 000000EC D014            beq              finish
  229 000000EE E7DE            b                check
  230 000000F0         
  231 000000F0         charac_diff                          ;;;Only copy to aux
                                                             buffer the charect
                                                            er with smallest co
                                                            de, update its corr
                                                            esponding index 
  232 000000F0 DC08            bgt              reverse_order
  233 000000F2 700F            strb             r7,[r1]     ;character in subli
                                                            st1 in less than th
                                                            e code of character
                                                             in sublist2
  234 000000F4 F101 0101       add              r1,#1
  235 000000F8 2D00            cmp              r5,#0
  236 000000FA D0F4            beq              check_if_done ;index for sublis
                                                            t 1 will be zero wh
                                                            en we are done insp
                                                            ecting that sublist
                                                            
  237 000000FC 3D01            subs             r5,#1
  238 000000FE F102 0201       add              r2,#1
  239 00000102 E7F0            b                check_if_done
  240 00000104         reverse_order
  241 00000104 F881 8000       strb             r8,[r1]     ;character in subli
                                                            st2 in less than ch
                                                            aracter in sublist1
                                                            .
  242 00000108 F101 0101       add              r1,#1
  243 0000010C 2E00            cmp              r6,#0
  244 0000010E D0EA            beq              check_if_done ;index for sublis
                                                            t 1 will be zero wh
                                                            en we are done insp



ARM Macro Assembler    Page 7 


                                                            ecting that sublist
                                                            
  245 00000110 3E01            subs             r6,#1
  246 00000112 F104 0401       add              r4,#1
  247 00000116 E7E6            b                check_if_done
  248 00000118         
  249 00000118 E8BD 01F6 
                       finish  pop              {r1,r2,r4,r5,r6,r7,r8}
  250 0000011C         ;r1 contains now the memory address of source buffer ...
                        in this case aux_buffer
  251 0000011C         ;r2 constains now vthe memory address of destination buf
                       fer ... in this case sublist1
  252 0000011C EB05 0306       add              r3,r5,r6    ;size of sorted str
                                                            ing is the addition
                                                            g of the size of bo
                                                            th sublists
  253 00000120         
  254 00000120 F7FF FFFE       bl               byte_copy   ;;;copy aux buffer 
                                                            to input buffer 
  255 00000124         
  256 00000124 BD08            pop              {r3,pc}
  257 00000126                 ENDP
  258 00000126         
  259 00000126         
  260 00000126         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
  261 00000126         ;;; End of assembly file
  262 00000126 00 00           align
  263 00000128                 end
              00000000 
              20000100 
              0000000A 
              20000400 
              20001000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab4.d -o.\objects\lab4.o -IC:\Keil_v5\ARM\RV31\INC -IC:
\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x --predefine="__UVI
SION_VERSION SETA 515" --list=.\listings\lab4.lst lab4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 21 in file lab4.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 27 in file lab4.s
   Uses
      At line 22 in file lab4.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 35 in file lab4.s
   Uses
      None
Comment: MYCODE unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 42 in file lab4.s
   Uses
      At line 29 in file lab4.s
      At line 37 in file lab4.s

byte_copy 00000070

Symbol: byte_copy
   Definitions
      At line 138 in file lab4.s
   Uses
      At line 49 in file lab4.s
      At line 254 in file lab4.s

charac_diff 000000F0

Symbol: charac_diff
   Definitions
      At line 231 in file lab4.s
   Uses
      At line 212 in file lab4.s
Comment: charac_diff used once
check 000000AE

Symbol: check
   Definitions
      At line 200 in file lab4.s
   Uses
      At line 226 in file lab4.s
      At line 229 in file lab4.s

check_if_done 000000E6

Symbol: check_if_done
   Definitions
      At line 224 in file lab4.s
   Uses
      At line 221 in file lab4.s
      At line 236 in file lab4.s
      At line 239 in file lab4.s
      At line 244 in file lab4.s
      At line 247 in file lab4.s

compare 000000C4

Symbol: compare
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 211 in file lab4.s
   Uses
      At line 207 in file lab4.s
Comment: compare used once
cont_sub2 000000DE

Symbol: cont_sub2
   Definitions
      At line 221 in file lab4.s
   Uses
      At line 218 in file lab4.s
Comment: cont_sub2 used once
copyLoop 00000076

Symbol: copyLoop
   Definitions
      At line 142 in file lab4.s
   Uses
      At line 150 in file lab4.s
Comment: copyLoop used once
done 00000010

Symbol: done
   Definitions
      At line 57 in file lab4.s
   Uses
      At line 57 in file lab4.s
Comment: done used once
finish 00000118

Symbol: finish
   Definitions
      At line 249 in file lab4.s
   Uses
      At line 228 in file lab4.s
Comment: finish used once
load_sub1 000000B6

Symbol: load_sub1
   Definitions
      At line 203 in file lab4.s
   Uses
      At line 200 in file lab4.s
Comment: load_sub1 used once
load_sub2 000000C0

Symbol: load_sub2
   Definitions
      At line 208 in file lab4.s
   Uses
      At line 202 in file lab4.s
      At line 205 in file lab4.s

merge 00000090

Symbol: merge
   Definitions
      At line 183 in file lab4.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 107 in file lab4.s
      At line 120 in file lab4.s

no_stack_overflow 000000A4

Symbol: no_stack_overflow
   Definitions
      At line 194 in file lab4.s
   Uses
      At line 189 in file lab4.s
Comment: no_stack_overflow used once
part2 00000038

Symbol: part2
   Definitions
      At line 98 in file lab4.s
   Uses
      At line 92 in file lab4.s
Comment: part2 used once
part3 00000052

Symbol: part3
   Definitions
      At line 111 in file lab4.s
   Uses
      At line 103 in file lab4.s
Comment: part3 used once
reverse_order 00000104

Symbol: reverse_order
   Definitions
      At line 240 in file lab4.s
   Uses
      At line 232 in file lab4.s
Comment: reverse_order used once
size1 0000001C

Symbol: size1
   Definitions
      At line 66 in file lab4.s
   Uses
      None
Comment: size1 unused
sort 00000020

Symbol: sort
   Definitions
      At line 86 in file lab4.s
   Uses
      At line 52 in file lab4.s
      At line 114 in file lab4.s
      At line 118 in file lab4.s

string1 00000012

Symbol: string1
   Definitions
      At line 61 in file lab4.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 46 in file lab4.s
      At line 63 in file lab4.s

21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

RAM_START 20000000

Symbol: RAM_START
   Definitions
      At line 17 in file lab4.s
   Uses
      None
Comment: RAM_START unused
end_of_stack 20001000

Symbol: end_of_stack
   Definitions
      At line 16 in file lab4.s
   Uses
      At line 186 in file lab4.s
Comment: end_of_stack used once
string1size 0000000A

Symbol: string1size
   Definitions
      At line 63 in file lab4.s
   Uses
      At line 48 in file lab4.s
      At line 67 in file lab4.s

3 symbols
359 symbols in table
