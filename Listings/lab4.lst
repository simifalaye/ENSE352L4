


ARM Macro Assembler    Page 1 


    1 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
    2 00000000         ;;; Project: Lab 4 - Sorting arrays of characters in asc
                       ending 
    3 00000000         ;;;          order using Merge sort algorithm
    4 00000000         ;;; File: 
    5 00000000         ;;; Class: lab4_sort.s
    6 00000000         ;;; Date: 
    7 00000000         ;;; Programmer: 
    8 00000000         ;;; Description:
    9 00000000         
   10 00000000         
   11 00000000         ; Directives
   12 00000000                 PRESERVE8
   13 00000000                 THUMB
   14 00000000         
   15 00000000         ;;; Equates
   16 00000000 20001000 
                       end_of_stack
                               equ              0x20001000  ;Allocating 4kB of 
                                                            memory for the stac
                                                            k
   17 00000000 20000000 
                       RAM_START
                               equ              0x20000000
   18 00000000         
   19 00000000         ; Vector Table Mapped to Address 0 at Reset, Linker requ
                       ires __Vectors to be exported
   20 00000000         
   21 00000000                 AREA             RESET, DATA, READONLY
   22 00000000                 EXPORT           __Vectors
   23 00000000         ;The DCD directive allocates one or more words of memory
                       , aligned on four-byte boundaries, 
   24 00000000         ;and defines the initial runtime contents of the memory.
                       
   25 00000000         
   26 00000000         
   27 00000000         __Vectors
   28 00000000 20002000        DCD              0x20002000  ; stack pointer val
                                                            ue when stack is em
                                                            pty
   29 00000004 00000000        DCD              Reset_Handler ; reset vector
   30 00000008         
   31 00000008                 ALIGN
   32 00000008         
   33 00000008         ;My  program,  Linker requires Reset_Handler and it must
                        be exported
   34 00000008         
   35 00000008                 AREA             MYCODE, CODE, READONLY
   36 00000000                 ENTRY
   37 00000000                 EXPORT           Reset_Handler
   38 00000000         
   39 00000000         
   40 00000000         
   41 00000000         
   42 00000000         Reset_Handler
                               PROC
   43 00000000         ;; Copy the string of characters from flash to RAM buffe
                       r so it 



ARM Macro Assembler    Page 2 


   44 00000000         ;; can be sorted  - Student to do  
   45 00000000         
   46 00000000 4948            LDR              R1, =string1 ;load the source s
                                                            tring into R1
   47 00000002 4A49            LDR              R2, =0x20000100 ;load start of 
                                                            destination address
                                                             into R2
   48 00000004 4B49            LDR              R3, =string1size ;putting size 
                                                            (in bytes) of strin
                                                            g1 into R3
   49 00000006 F7FF FFFE       bl               byte_copy
   50 0000000A         
   51 0000000A 4949            LDR              R1, = 0x20000400
   52 0000000C F7FF FFFE       bl               sort
   53 00000010         
   54 00000010         
   55 00000010         
   56 00000010         ;; we are finished
   57 00000010 E7FE    done    b                done        ; finished mainline
                                                             code.
   58 00000012                 ENDP
   59 00000012         
   60 00000012         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
   61 00000012         string1
   62 00000012 41 42 45 
              46 5A 41 
              43 44 47 
              4C               dcb              "ABEFZACDGL"
   63 0000001C 0000000A 
                       string1size
                               equ              . - string1
   64 0000001C         
   65 0000001C                 align
   66 0000001C         size1
   67 0000001C 0000000A        dcd              string1size
   68 00000020         
   69 00000020         
   70 00000020         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
   71 00000020         ;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;
   72 00000020         ;;; Author:
   73 00000020         ;;; Sort an array of characters in ascending order using
                        the 
   74 00000020         ;;; algorithm described in the lab handout
   75 00000020         ;;; 
   76 00000020         ;;; Require:
   77 00000020         ;;; R1: ptr to buffer in RAM containing the input string
                        (string_buffer)
   78 00000020         ;;; R2: ptr to auxiliary buffer in RAM used by subroutin
                       e "merge" (aux_buffer)
   79 00000020         ;;; R3: size of the string (contained in [size1] )
   80 00000020         ;;; 
   81 00000020         ;;; Promise: Returns 1 in error register R10 if there wa
                       s an error, else 
   82 00000020         ;;; R10 is 0 and the buffer in RAM contains the sorted s
                       tring of characters
   83 00000020         ;;; Subroutine must not modify any other register.



ARM Macro Assembler    Page 3 


   84 00000020         ;;; 
   85 00000020                 ALIGN
   86 00000020         sort    PROC
   87 00000020         ;; include here the body of your routine
   88 00000020 B5FE            PUSH             {LR,R1,R2,R3,R4,R5,R6,R7}
   89 00000022         
   90 00000022 F04F 0702       MOV              R7, #2
   91 00000026 2B01            CMP              R3, #1
   92 00000028 D104            BNE              part2
   93 0000002A 7810            LDRB             R0, [R2]
   94 0000002C 7008            STRB             R0, [R1]
   95 0000002E E8BD 40FE       POP              {LR,R1,R2,R3,R4,R5,R6,R7}
   96 00000032 4770            BX               LR
   97 00000034         
   98 00000034         part2
   99 00000034         ;R1 is a new location under R2 0x20000400
  100 00000034         ;R2 is the location of the start of the string we copied
                        from byte copy
  101 00000034         ;R3 is the size in bytes of the string
  102 00000034         ;R5 is the size of sublist2 which we calculate
  103 00000034         ;R6 is the size of sublist1 which we calculate
  104 00000034 2B02            CMP              R3, #2
  105 00000036 D10A            BNE              part3
  106 00000038 F102 0401       ADD              R4, R2, #1  ; R4 (sublist2)
  107 0000003C F04F 0501       MOV              R5, #1      ;Size of sublist2
  108 00000040 F04F 0601       MOV              R6, #1      ;Size of sublist1
  109 00000044 F7FF FFFE       BL               merge
  110 00000048         
  111 00000048 E8BD 40FE       POP              {LR,R1,R2,R3,R4,R5,R6,R7}
  112 0000004C 4770            BX               LR
  113 0000004E         part3
  114 0000004E FB93 F3F7       SDIV             R3, R3, R7
  115 00000052 461E            MOV              R6, R3      ; Size of sublist1
  116 00000054 F7FF FFFE       BL               sort
  117 00000058         
  118 00000058 EB06 0402       ADD              R4, R6, R2
  119 0000005C 461D            MOV              R5, R3      ; Size of sublist2
  120 0000005E F7FF FFFE       BL               sort
  121 00000062         
  122 00000062 F7FF FFFE       BL               merge
  123 00000066 E8BD 40FE       POP              {LR,R1,R2,R3,R4,R5,R6,R7}
  124 0000006A 4770            bx               lr
  125 0000006C         
  126 0000006C                 ENDP
  127 0000006C         
  128 0000006C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
  129 0000006C         ;;; copy an array of bytes from source ptr R1 to dest pt
                       r R2.  R3
  130 0000006C         ;;; contains the number of bytes to copy.
  131 0000006C         ;;; Require:
  132 0000006C         ;;; The destination had better be somewhere in RAM, but 
                       that's the
  133 0000006C         ;;; caller's responsibility.  As is the job to ensure th
                       e source and 
  134 0000006C         ;;; dest arrays don't overlap.
  135 0000006C         ;;;
  136 0000006C         ;;; Promise: No registers are modified.  The destination
                        buffer is



ARM Macro Assembler    Page 4 


  137 0000006C         ;;;          modified.
  138 0000006C         ;;; Author: Prof. Karim Naqvi (Oct 2013)
  139 0000006C                 ALIGN
  140 0000006C         byte_copy
                               PROC
  141 0000006C B41E            push             {r1,r2,r3,r4}
  142 0000006E F04F 0400       LDR              R4, =0x00000000
  143 00000072         
  144 00000072         copyLoop
  145 00000072 7808            LDRB             R0, [R1]    ;Load the address i
                                                            n memory into R0
  146 00000074 7010            STRB             R0, [R2]    ;Store one byte fro
                                                            m string1 into the 
                                                            memory address loca
                                                            tion
  147 00000076 F104 0401       ADD              R4, R4, #0x00000001 ;Increment 
                                                            the counter
  148 0000007A F101 0101       ADD              R1, R1, #0x00000001 ;
  149 0000007E F102 0201       ADD              R2, R2, #0x00000001 ;Increment 
                                                            the memory location
                                                            Increment to the ne
                                                            xt byte in the stri
                                                            ng
  150 00000082         
  151 00000082 429C            CMP              R4, R3      ;Compare the counte
                                                            r with string size
  152 00000084 D1F5            BNE              copyLoop    ;Branch if they do 
                                                            not equal back to t
                                                            he loop
  153 00000086                 ENDP
  154 00000086         
  155 00000086 BC1E            pop              {r1,r2,r3,r4}
  156 00000088 4770            bx               lr
  157 0000008A         
  158 0000008A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
  159 0000008A         ;;; Author: Diego Castro (Nov 2013)
  160 0000008A         ;;; Merges two sorted sublists (sublist1 and sublist2) t
                       hat 
  161 0000008A         ;;; contains the ASCII code of characters. Resulting arr
                       ay 
  162 0000008A         ;;; combines the characters of both sublists and it is s
                       orted in ascending order
  163 0000008A         ;;; The subroutine will overwrite the original contents 
                       of both sublists
  164 0000008A         ;;;
  165 0000008A         ;;; Require: 
  166 0000008A         ;;;  R1: pointer to an auxiliary buffer
  167 0000008A         ;;;  R2: pointer to sublist1
  168 0000008A         ;;;  R4: pointer to sublist2
  169 0000008A         ;;;     R5: size of sublist2
  170 0000008A         ;;;  R6: size of sublist1
  171 0000008A         ;;; Promise: Sublist1 and sublist2 are adjacent buffers 
                       in memory 
  172 0000008A         ;;; (i.e. first memory address of sublist2 is located 
  173 0000008A         ;;; right after last memory address of sublist1). Both s
                       ublists will be overwritten  
  174 0000008A         ;;; with the sorted array after merging. 
  175 0000008A         ;;; If stack overflow occurs, it returns 1 in error regi



ARM Macro Assembler    Page 5 


                       ster R10 else r10 is zero. 
  176 0000008A         ;;; Subroutine does not modify any other register.
  177 0000008A         ;;; Example: 
  178 0000008A         ;;;            sublist1  |  Sublist2
  179 0000008A         ;;;                  degz|fht
  180 0000008A         ;;;
  181 0000008A         ;;;            sorted array
  182 0000008A         ;;;                  defghtz
  183 0000008A         ;;; Note: this function needs at least 9 words of free s
                       pace in the stack
  184 0000008A 00 00           ALIGN
  185 0000008C         merge   PROC
  186 0000008C         
  187 0000008C         ;;;checking if there is enough space in stack
  188 0000008C F8DF A0A4       ldr              r10,=end_of_stack
  189 00000090 EBBD 0A0A       subs             r10,sp,r10  ;R10 contains numbe
                                                            r of bytes availabl
                                                            e in stack   
  190 00000094 F1BA 0F24       cmp              r10,#36     ;this subroutine re
                                                            quires at least 9 w
                                                            ords (36 bytes) of 
                                                            free space in the s
                                                            tack 
  191 00000098 DC02            bgt              no_stack_overflow
  192 0000009A F04F 0A01       mov              r10,#1      ;not enough space i
                                                            n stack for this pr
                                                            ocedure
  193 0000009E 4770            bx               lr
  194 000000A0         
  195 000000A0         
  196 000000A0         no_stack_overflow
  197 000000A0 F04F 0A00       mov              r10,#0
  198 000000A4 B508            push             {r3,lr}
  199 000000A6 E92D 01F6       push             {r1,r2,r4,r5,r6,r7,r8}
  200 000000AA         
  201 000000AA         
  202 000000AA B915    check   cbnz             r5,load_sub1 ;when r5 is 0, we 
                                                            are done checking s
                                                            ublist 1
  203 000000AC F04F 078F       mov              r7,#0x8F    ;done with sublist 
                                                            1, loading high val
                                                            ue in R7
  204 000000B0 E004            b                load_sub2
  205 000000B2         load_sub1
  206 000000B2 7817            ldrb             r7,[r2]     ;R7 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist1
  207 000000B4 B916            cbnz             r6,load_sub2
  208 000000B6 F04F 088F       mov              r8,#0x8F    ;done with sublist 
                                                            2, loading high val
                                                            ue in R8
  209 000000BA E001            b                compare
  210 000000BC         load_sub2
  211 000000BC F894 8000       ldrb             r8,[r4]     ;R8 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist2
  212 000000C0         
  213 000000C0 4547    compare cmp              r7,r8
  214 000000C2 D113            bne              charac_diff



ARM Macro Assembler    Page 6 


  215 000000C4 700F            strb             r7,[r1]     ;both characters ar
                                                            e equal, we copy bo
                                                            th to the aux buffe
                                                            r;
  216 000000C6 F101 0101       add              r1,#1
  217 000000CA F881 8000       strb             r8,[r1]
  218 000000CE F101 0101       add              r1,#1
  219 000000D2         ;;;Updating indexes
  220 000000D2 B115            cbz              r5,cont_sub2 ;index for sublist
                                                             1 will be zero whe
                                                            n we are done inspe
                                                            cting that sublist
  221 000000D4 3D01            subs             r5,#1
  222 000000D6 F102 0201       add              r2,#1
  223 000000DA B116    cont_sub2
                               cbz              r6,check_if_done ;index for sub
                                                            list 2 will be zero
                                                             when we are done i
                                                            nspecting that subl
                                                            ist
  224 000000DC 3E01            subs             r6,#1
  225 000000DE F104 0401       add              r4,#1
  226 000000E2         check_if_done
  227 000000E2 42B5            cmp              r5,r6
  228 000000E4 D1E1            bne              check
  229 000000E6 2D00            cmp              r5,#0       ;both indexes are z
                                                            ero, then we are do
                                                            ne
  230 000000E8 D014            beq              finish
  231 000000EA E7DE            b                check
  232 000000EC         
  233 000000EC         charac_diff                          ;;;Only copy to aux
                                                             buffer the charect
                                                            er with smallest co
                                                            de, update its corr
                                                            esponding index 
  234 000000EC DC08            bgt              reverse_order
  235 000000EE 700F            strb             r7,[r1]     ;character in subli
                                                            st1 in less than th
                                                            e code of character
                                                             in sublist2
  236 000000F0 F101 0101       add              r1,#1
  237 000000F4 2D00            cmp              r5,#0
  238 000000F6 D0F4            beq              check_if_done ;index for sublis
                                                            t 1 will be zero wh
                                                            en we are done insp
                                                            ecting that sublist
                                                            
  239 000000F8 3D01            subs             r5,#1
  240 000000FA F102 0201       add              r2,#1
  241 000000FE E7F0            b                check_if_done
  242 00000100         reverse_order
  243 00000100 F881 8000       strb             r8,[r1]     ;character in subli
                                                            st2 in less than ch
                                                            aracter in sublist1
                                                            .
  244 00000104 F101 0101       add              r1,#1
  245 00000108 2E00            cmp              r6,#0
  246 0000010A D0EA            beq              check_if_done ;index for sublis



ARM Macro Assembler    Page 7 


                                                            t 1 will be zero wh
                                                            en we are done insp
                                                            ecting that sublist
                                                            
  247 0000010C 3E01            subs             r6,#1
  248 0000010E F104 0401       add              r4,#1
  249 00000112 E7E6            b                check_if_done
  250 00000114         
  251 00000114 E8BD 01F6 
                       finish  pop              {r1,r2,r4,r5,r6,r7,r8}
  252 00000118         ;r1 contains now the memory address of source buffer ...
                        in this case aux_buffer
  253 00000118         ;r2 constains now vthe memory address of destination buf
                       fer ... in this case sublist1
  254 00000118 EB05 0306       add              r3,r5,r6    ;size of sorted str
                                                            ing is the addition
                                                            g of the size of bo
                                                            th sublists
  255 0000011C         
  256 0000011C F7FF FFFE       bl               byte_copy   ;;;copy aux buffer 
                                                            to input buffer 
  257 00000120         
  258 00000120 BD08            pop              {r3,pc}
  259 00000122                 ENDP
  260 00000122         
  261 00000122         
  262 00000122         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
  263 00000122         ;;; End of assembly file
  264 00000122 00 00           align
  265 00000124                 end
              00000000 
              20000100 
              0000000A 
              20000400 
              20001000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab4.d -o.\objects\lab4.o -IC:\Keil_v5\ARM\RV31\INC -IC:
\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x --predefine="__UVI
SION_VERSION SETA 515" --list=.\listings\lab4.lst lab4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 21 in file lab4.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 27 in file lab4.s
   Uses
      At line 22 in file lab4.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 35 in file lab4.s
   Uses
      None
Comment: MYCODE unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 42 in file lab4.s
   Uses
      At line 29 in file lab4.s
      At line 37 in file lab4.s

byte_copy 0000006C

Symbol: byte_copy
   Definitions
      At line 140 in file lab4.s
   Uses
      At line 49 in file lab4.s
      At line 256 in file lab4.s

charac_diff 000000EC

Symbol: charac_diff
   Definitions
      At line 233 in file lab4.s
   Uses
      At line 214 in file lab4.s
Comment: charac_diff used once
check 000000AA

Symbol: check
   Definitions
      At line 202 in file lab4.s
   Uses
      At line 228 in file lab4.s
      At line 231 in file lab4.s

check_if_done 000000E2

Symbol: check_if_done
   Definitions
      At line 226 in file lab4.s
   Uses
      At line 223 in file lab4.s
      At line 238 in file lab4.s
      At line 241 in file lab4.s
      At line 246 in file lab4.s
      At line 249 in file lab4.s

compare 000000C0

Symbol: compare
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 213 in file lab4.s
   Uses
      At line 209 in file lab4.s
Comment: compare used once
cont_sub2 000000DA

Symbol: cont_sub2
   Definitions
      At line 223 in file lab4.s
   Uses
      At line 220 in file lab4.s
Comment: cont_sub2 used once
copyLoop 00000072

Symbol: copyLoop
   Definitions
      At line 144 in file lab4.s
   Uses
      At line 152 in file lab4.s
Comment: copyLoop used once
done 00000010

Symbol: done
   Definitions
      At line 57 in file lab4.s
   Uses
      At line 57 in file lab4.s
Comment: done used once
finish 00000114

Symbol: finish
   Definitions
      At line 251 in file lab4.s
   Uses
      At line 230 in file lab4.s
Comment: finish used once
load_sub1 000000B2

Symbol: load_sub1
   Definitions
      At line 205 in file lab4.s
   Uses
      At line 202 in file lab4.s
Comment: load_sub1 used once
load_sub2 000000BC

Symbol: load_sub2
   Definitions
      At line 210 in file lab4.s
   Uses
      At line 204 in file lab4.s
      At line 207 in file lab4.s

merge 0000008C

Symbol: merge
   Definitions
      At line 185 in file lab4.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 109 in file lab4.s
      At line 122 in file lab4.s

no_stack_overflow 000000A0

Symbol: no_stack_overflow
   Definitions
      At line 196 in file lab4.s
   Uses
      At line 191 in file lab4.s
Comment: no_stack_overflow used once
part2 00000034

Symbol: part2
   Definitions
      At line 98 in file lab4.s
   Uses
      At line 92 in file lab4.s
Comment: part2 used once
part3 0000004E

Symbol: part3
   Definitions
      At line 113 in file lab4.s
   Uses
      At line 105 in file lab4.s
Comment: part3 used once
reverse_order 00000100

Symbol: reverse_order
   Definitions
      At line 242 in file lab4.s
   Uses
      At line 234 in file lab4.s
Comment: reverse_order used once
size1 0000001C

Symbol: size1
   Definitions
      At line 66 in file lab4.s
   Uses
      None
Comment: size1 unused
sort 00000020

Symbol: sort
   Definitions
      At line 86 in file lab4.s
   Uses
      At line 52 in file lab4.s
      At line 116 in file lab4.s
      At line 120 in file lab4.s

string1 00000012

Symbol: string1
   Definitions
      At line 61 in file lab4.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 46 in file lab4.s
      At line 63 in file lab4.s

21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

RAM_START 20000000

Symbol: RAM_START
   Definitions
      At line 17 in file lab4.s
   Uses
      None
Comment: RAM_START unused
end_of_stack 20001000

Symbol: end_of_stack
   Definitions
      At line 16 in file lab4.s
   Uses
      At line 188 in file lab4.s
Comment: end_of_stack used once
string1size 0000000A

Symbol: string1size
   Definitions
      At line 63 in file lab4.s
   Uses
      At line 48 in file lab4.s
      At line 67 in file lab4.s

3 symbols
359 symbols in table
